{"version":3,"file":"ai_control.min.js","sources":["../src/ai_control.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Main module for the block_ai_control.\n *\n * @module     block_ai_control/ai_control\n * @copyright  2024 ISB Bayern\n * @author     Philipp Memmel\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getAiconfig} from 'block_ai_control/repository';\nimport {init as initControlArea} from 'block_ai_control/ai_control_config';\nimport {init as initInfoArea} from 'block_ai_control/ai_control_info';\n\n\nlet baseElement = null;\n\n/**\n * Main handler for the block_ai_control.\n *\n * @param {string} selector the selector of the rendered block main element.\n */\nexport const init = async(selector) => {\n    baseElement = document.querySelector(selector);\n    const contextid = baseElement.dataset.contextid;\n    const infoArea = baseElement.querySelector('[data-aicontrol=\"info\"]');\n    const controlArea = baseElement.querySelector('[data-aicontrol=\"config\"]');\n\n    const aiconfig = await getAiconfig(contextid);\n\n    if (controlArea) {\n        await initControlArea(controlArea, aiconfig);\n    }\n\n    // It's important to render the info area AFTER the control area, because the info area needs to add\n    // a change listener to the config area.\n    await initInfoArea(infoArea, aiconfig);\n};\n\nexport const convertTargetUnixTimeToCountdown = (unixTime) => {\n    const distance = new Date(unixTime * 1000) - Date.now();\n    return {\n        days: Math.floor(distance / (1000 * 60 * 60 * 24)),\n        hours: Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n        minutes: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n        seconds: Math.floor((distance % (1000 * 60)) / 1000),\n    };\n};\n"],"names":["baseElement","async","document","querySelector","selector","contextid","dataset","infoArea","controlArea","aiconfig","unixTime","distance","Date","now","days","Math","floor","hours","minutes","seconds"],"mappings":";;;;;;;;;IA6BIA,YAAc,mBAOEC,MAAAA,WAChBD,YAAcE,SAASC,cAAcC,gBAC/BC,UAAYL,YAAYM,QAAQD,UAChCE,SAAWP,YAAYG,cAAc,2BACrCK,YAAcR,YAAYG,cAAc,6BAExCM,eAAiB,2BAAYJ,WAE/BG,mBACM,2BAAgBA,YAAaC,gBAKjC,yBAAaF,SAAUE,qDAGgBC,iBACvCC,SAAW,IAAIC,KAAgB,IAAXF,UAAmBE,KAAKC,YAC3C,CACHC,KAAMC,KAAKC,MAAML,gBACjBM,MAAOF,KAAKC,MAAOL,qBACnBO,QAASH,KAAKC,MAAOL,mBACrBQ,QAASJ,KAAKC,MAAOL,aAA0B"}