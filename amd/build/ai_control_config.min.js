define("block_ai_control/ai_control_config",["exports","block_ai_control/repository","block_ai_control/ai_control","core/templates","core/str"],(function(_exports,_repository,_ai_control,_templates,_str){var obj;
/**
   * Handler for the config area of block_ai_control.
   *
   * @module     block_ai_control/ai_control_config
   * @copyright  2024 ISB Bayern
   * @author     Philipp Memmel
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_templates=(obj=_templates)&&obj.__esModule?obj:{default:obj};let baseElement=null;_exports.init=async(element,aiconfig)=>{baseElement=element;const templateContext={identifier:"aiconfig_enabled"};templateContext.text=await(0,_str.getString)("toggleai","block_ai_control"),templateContext.checked=aiconfig.enabled,templateContext.expiresat=new Date(1e3*parseInt(aiconfig.expiresatLocaltime)).toISOString().slice(0,16);const{days:days,hours:hours,minutes:minutes}=(0,_ai_control.convertTargetUnixTimeToCountdown)(templateContext.expiresat);templateContext.durationDays=days,templateContext.durationHours=hours,templateContext.durationMinutes=minutes,templateContext.purposes=[],aiconfig.purposes.forEach((purpose=>{const purposeConfig={checked:purpose.allowed,identifier:"purpose_"+purpose.name,text:purpose.displayname};templateContext.purposes.push(purposeConfig)}));const{html:html,js:js}=await _templates.default.renderForPromise("block_ai_control/ai_control_config",{...templateContext});_templates.default.replaceNodeContents(baseElement,html,js),baseElement.querySelectorAll('[data-aiconfig-item^="switchexpiryview"]').forEach((button=>{button.addEventListener("click",(()=>{baseElement.querySelectorAll("[data-aiconfig-show]").forEach((element=>{element.dataset.aiconfigShow="1"===element.dataset.aiconfigShow?"0":"1",element.classList.toggle("d-none")})),syncViews()}))})),baseElement.querySelector('[data-ai-config="submitbutton"]').addEventListener("click",(async()=>{"duration"===("0"===baseElement.querySelector('[data-aiconfig-item="switchexpiryviewduration"]').dataset.aiconfigShow?"duration":"date")&&updateDateFromDuration();const refreshedData=await(0,_repository.updateAiconfig)(buildUpdateAiconfigObject());dispatchChangedEvent(refreshedData)})),baseElement.querySelector('[data-toggle-identifier="aiconfig_enabled"] input').addEventListener("change",(()=>{baseElement.querySelector('[data-ai-control="purposeslist"]').classList.toggle("d-none"),baseElement.querySelector('[data-ai-control="expirydate"]').classList.toggle("d-none")}))};const buildUpdateAiconfigObject=()=>{const purposeConfigElements=baseElement.querySelectorAll('[data-toggle-identifier^="purpose_"]'),enabledToggle=baseElement.querySelector('[data-toggle-identifier="aiconfig_enabled"]'),expiresat=baseElement.querySelector('[data-aiconfig-item="expiresat"]'),aiconfig={};return aiconfig.id=baseElement.parentElement.dataset.contextid,aiconfig.enabled=!!parseInt(enabledToggle.dataset.checked),aiconfig.expiresat=parseInt(+new Date(expiresat.value))/1e3,aiconfig.purposes=[],purposeConfigElements.forEach((purposeConfigElement=>{const purpose={};purpose.id=purposeConfigElement.dataset.toggleIdentifier.replace(/^purpose_/,""),purpose.allowed=!!parseInt(purposeConfigElement.dataset.checked),aiconfig.purposes.push(purpose)})),aiconfig},dispatchChangedEvent=refreshedAiconfig=>{baseElement.dispatchEvent(new CustomEvent("aiconfigUpdated",{detail:{aiconfig:refreshedAiconfig}}))},updateDateFromDuration=()=>{const expirydate=baseElement.querySelector('[data-aiconfig-item="expiresat"]'),expirydurationDays=baseElement.querySelector('[data-aiconfig-item="expiryduration_days"]'),expirydurationHours=baseElement.querySelector('[data-aiconfig-item="expiryduration_hours"]'),expirydurationMinutes=baseElement.querySelector('[data-aiconfig-item="expiryduration_minutes"]'),currentTime=new Date;currentTime.setTime(currentTime.getTime()-60*currentTime.getTimezoneOffset()*1e3+24*expirydurationDays.value*60*60*1e3+60*expirydurationHours.value*60*1e3+60*expirydurationMinutes.value*1e3),expirydate.value=currentTime.toISOString().slice(0,16)},syncViews=()=>{"duration"===("0"===baseElement.querySelector('[data-aiconfig-item="switchexpiryviewduration"]').dataset.aiconfigShow?"duration":"date")?(()=>{const expirydate=baseElement.querySelector('[data-aiconfig-item="expiresat"]'),expirydurationDays=baseElement.querySelector('[data-aiconfig-item="expiryduration_days"]'),expirydurationHours=baseElement.querySelector('[data-aiconfig-item="expiryduration_hours"]'),expirydurationMinutes=baseElement.querySelector('[data-aiconfig-item="expiryduration_minutes"]'),unixtime=parseInt(+new Date(expirydate.value))/1e3,{days:days,hours:hours,minutes:minutes}=(0,_ai_control.convertTargetUnixTimeToCountdown)(unixtime);expirydurationDays.value=days,expirydurationHours.value=hours,expirydurationMinutes.value=minutes})():updateDateFromDuration()}}));

//# sourceMappingURL=ai_control_config.min.js.map