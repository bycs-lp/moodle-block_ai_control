{"version":3,"file":"ai_control_info.min.js","sources":["../src/ai_control_info.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Renders the info part of the block_ai_control.\n *\n * @module     block_ai_control/ai_control_info\n * @copyright  2024 ISB Bayern\n * @author     Philipp Memmel\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getAiconfig} from 'block_ai_control/repository';\nimport Templates from 'core/templates';\nimport {convertTargetUnixTimeToCountdown} from \"./ai_control\";\n\nlet baseElement = null;\nlet contextId = null;\nlet countdownTimer = null;\n\n/**\n * Handler main function for the info area.\n *\n * @param {HTMLElement} element the HTML element of the info area\n * @param {object} aiconfig the aiconfig object retrieved by the external function\n */\nexport const init = async(element, aiconfig) => {\n    baseElement = element;\n    contextId = aiconfig.id;\n    await renderWidget(aiconfig);\n\n    const controlArea = baseElement.parentElement.querySelector('[data-aicontrol=\"config\"]');\n    if (controlArea) {\n        controlArea.addEventListener('aiconfigUpdated', async(event) => {\n            const aiconfig = event.detail.aiconfig;\n            const templateContext = {\n                enabled: aiconfig.enabled,\n                expiresat: aiconfig.expiresat,\n                expiresatFormatted: aiconfig.expiresatFormatted\n            };\n            await renderWidget(templateContext);\n        });\n    }\n};\n\n/**\n * Helper function to render the info widget based on the template Context.\n *\n * @param {object} templateContext the template context to use for rendering\n */\nconst renderWidget = async(templateContext) => {\n    const targetTime = templateContext.expiresat;\n    // JavaScript Date object is in milliseconds, our expiresat being used in the context and stores in the database is in\n    // seconds.\n    const distance = targetTime * 1000 - Date.now();\n    // For the last 5 minutes add a warning color.\n    templateContext.warning = distance < 5 * 60 * 1000;\n    const {html, js} = await Templates.renderForPromise('block_ai_control/ai_control_info', {...templateContext});\n    Templates.replaceNodeContents(baseElement, html, js);\n\n    const countdownElement = baseElement.querySelector('[data-aicontrol=\"countdown\"]');\n\n    clearInterval(countdownTimer);\n    countdownTimer = setInterval(async() => {\n        // We have to recalculate the distance, because \"Date.now()\" changes every second.\n        const {days, hours, minutes, seconds} = convertTargetUnixTimeToCountdown(targetTime);\n        const countdownContext = {\n            days,\n            hours,\n            minutes,\n            seconds\n        };\n        countdownContext.showDays = countdownContext.days > 0;\n        countdownContext.showHours = countdownContext.showDays ? true : countdownContext.hours > 0;\n        countdownContext.showMinutes = countdownContext.showHours ? true : countdownContext.minutes > 0;\n        countdownContext.showSeconds = countdownContext.showMinutes ? true : countdownContext.seconds > 0;\n\n        const {html, js} = await Templates.renderForPromise('block_ai_control/ai_control_countdown', countdownContext);\n        Templates.replaceNodeContents(countdownElement, html, js);\n        // In the case that the AI is enabled, but the countdown has run to 0, we have to reload the whole info widget.\n        if (templateContext.enabled && distance <= 0) {\n            clearInterval(countdownTimer);\n            const aiconfig = await getAiconfig(contextId);\n            // We clone the aiconfig object just as precaution, so it will not be altered by the init function.\n            await init(baseElement, {...aiconfig});\n        }\n    }, 1000);\n};\n"],"names":["baseElement","contextId","countdownTimer","init","async","element","aiconfig","id","renderWidget","controlArea","parentElement","querySelector","addEventListener","event","detail","templateContext","enabled","expiresat","expiresatFormatted","targetTime","distance","Date","now","warning","html","js","Templates","renderForPromise","replaceNodeContents","countdownElement","clearInterval","setInterval","days","hours","minutes","seconds","countdownContext","showDays","showHours","showMinutes","showSeconds"],"mappings":";;;;;;;;oJA4BIA,YAAc,KACdC,UAAY,KACZC,eAAiB,WAQRC,KAAOC,MAAMC,QAASC,YAC/BN,YAAcK,QACdJ,UAAYK,SAASC,SACfC,aAAaF,gBAEbG,YAAcT,YAAYU,cAAcC,cAAc,6BACxDF,aACAA,YAAYG,iBAAiB,mBAAmBR,MAAAA,cACtCE,SAAWO,MAAMC,OAAOR,SACxBS,gBAAkB,CACpBC,QAASV,SAASU,QAClBC,UAAWX,SAASW,UACpBC,mBAAoBZ,SAASY,0BAE3BV,aAAaO,8CAUzBP,aAAeJ,MAAAA,wBACXe,WAAaJ,gBAAgBE,UAG7BG,SAAwB,IAAbD,WAAoBE,KAAKC,MAE1CP,gBAAgBQ,QAAUH,SAAW,UAC/BI,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiB,mCAAoC,IAAIZ,qCAClFa,oBAAoB5B,YAAawB,KAAMC,UAE3CI,iBAAmB7B,YAAYW,cAAc,gCAEnDmB,cAAc5B,gBACdA,eAAiB6B,aAAY3B,gBAEnB4B,KAACA,KAADC,MAAOA,MAAPC,QAAcA,QAAdC,QAAuBA,UAAW,gDAAiChB,YACnEiB,iBAAmB,CACrBJ,KAAAA,KACAC,MAAAA,MACAC,QAAAA,QACAC,QAAAA,SAEJC,iBAAiBC,SAAWD,iBAAiBJ,KAAO,EACpDI,iBAAiBE,YAAYF,iBAAiBC,UAAkBD,iBAAiBH,MAAQ,EACzFG,iBAAiBG,cAAcH,iBAAiBE,WAAmBF,iBAAiBF,QAAU,EAC9FE,iBAAiBI,cAAcJ,iBAAiBG,aAAqBH,iBAAiBD,QAAU,QAE1FX,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiB,wCAAyCS,wCACnFR,oBAAoBC,iBAAkBL,KAAMC,IAElDV,gBAAgBC,SAAWI,UAAY,EAAG,CAC1CU,cAAc5B,sBACRI,eAAiB,2BAAYL,iBAE7BE,KAAKH,YAAa,IAAIM,cAEjC"}