{"version":3,"file":"ai_control_config.min.js","sources":["../src/ai_control_config.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handler for the config area of block_ai_control.\n *\n * @module     block_ai_control/ai_control_config\n * @copyright  2024 ISB Bayern\n * @author     Philipp Memmel\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {updateAiconfig} from 'block_ai_control/repository';\nimport {convertTargetUnixTimeToCountdown} from 'block_ai_control/ai_control';\nimport Templates from 'core/templates';\nimport {getString} from 'core/str';\n\nlet baseElement = null;\n\n/**\n * Init the handler for the control area of block_ai_control.\n *\n * @param {HTMLElement} element the HTML element of the control area\n * @param {object} aiconfig the aiconfig which has been fetched from the external function\n */\nexport const init = async(element, aiconfig) => {\n    baseElement = element;\n    const templateContext = {};\n    templateContext.identifier = 'aiconfig_enabled';\n    templateContext.text = await getString('toggleai', 'block_ai_control');\n    templateContext.checked = aiconfig.enabled;\n\n    templateContext.expiresat = new Date(parseInt(aiconfig.expiresatLocaltime) * 1000).toISOString().slice(0, 16);\n\n    const {days, hours, minutes} = convertTargetUnixTimeToCountdown(templateContext.expiresat);\n    templateContext.durationDays = days;\n    templateContext.durationHours = hours;\n    templateContext.durationMinutes = minutes;\n\n    templateContext.purposes = [];\n    aiconfig.purposes.forEach(purpose => {\n        const purposeConfig = {\n            checked: purpose.allowed,\n            identifier: 'purpose_' + purpose.name,\n            text: purpose.displayname\n        };\n        templateContext.purposes.push(purposeConfig);\n    });\n\n    const {html, js} = await Templates.renderForPromise('block_ai_control/ai_control_config', {...templateContext});\n    Templates.replaceNodeContents(baseElement, html, js);\n\n    baseElement.querySelectorAll('[data-aiconfig-item^=\"switchexpiryview\"]').forEach(button => {\n        button.addEventListener('click', () => {\n            const elementsToToggleVisibility = baseElement.querySelectorAll('[data-aiconfig-show]');\n            elementsToToggleVisibility.forEach(element => {\n                element.dataset.aiconfigShow = element.dataset.aiconfigShow === '1' ? '0' : '1';\n                element.classList.toggle('d-none');\n            });\n            // Important that we call this AFTER we changed the view. The function syncViews depends on that fact.\n            syncViews();\n        });\n    });\n\n    baseElement.querySelector('[data-ai-config=\"submitbutton\"]').addEventListener('click', async() => {\n        // If we are in date view, we just use the current date. If we are in duration view we need to sync the duration\n        // into the date, because when submitting the data we are using the date.\n        const currentExpiryView =\n            baseElement.querySelector('[data-aiconfig-item=\"switchexpiryviewduration\"]').dataset.aiconfigShow === '0'\n                ? 'duration' : 'date';\n        if (currentExpiryView === 'duration') {\n            updateDateFromDuration();\n        }\n        const refreshedData = await updateAiconfig(buildUpdateAiconfigObject());\n        dispatchChangedEvent(refreshedData);\n    });\n    baseElement.querySelector('[data-toggle-identifier=\"aiconfig_enabled\"] input').addEventListener('change', () => {\n        baseElement.querySelector('[data-ai-control=\"purposeslist\"]').classList.toggle('d-none');\n        baseElement.querySelector('[data-ai-control=\"expirydate\"]').classList.toggle('d-none');\n    });\n};\n\n/**\n * Collects information from the DOM and builds the new aiconfig object.\n *\n * This object then can be sent to the update external function.\n *\n * @returns {object} the aiconfig object which then can be used to send it to the update webservice.\n */\nconst buildUpdateAiconfigObject = () => {\n    const purposeConfigElements = baseElement.querySelectorAll('[data-toggle-identifier^=\"purpose_\"]');\n    const enabledToggle = baseElement.querySelector('[data-toggle-identifier=\"aiconfig_enabled\"]');\n    const expiresat = baseElement.querySelector('[data-aiconfig-item=\"expiresat\"]');\n\n    const aiconfig = {};\n    aiconfig.id = baseElement.parentElement.dataset.contextid;\n    aiconfig.enabled = !!parseInt(enabledToggle.dataset.checked);\n    aiconfig.expiresat = parseInt(+new Date(expiresat.value)) / 1000;\n    aiconfig.purposes = [];\n    purposeConfigElements.forEach(purposeConfigElement => {\n        const purpose = {};\n        purpose.id = purposeConfigElement.dataset.toggleIdentifier.replace(/^purpose_/, '');\n        purpose.allowed = !!parseInt(purposeConfigElement.dataset.checked);\n        aiconfig.purposes.push(purpose);\n    });\n    return aiconfig;\n};\n\n/**\n * Helper function to dispatch a changed event.\n *\n * The info area will react to this changed event so it knows when it has to rerender itself.\n *\n * @param {object} refreshedAiconfig the refreshed aiconfig object which has been received by the update external function.\n */\nconst dispatchChangedEvent = (refreshedAiconfig) => {\n    baseElement.dispatchEvent(new CustomEvent('aiconfigUpdated', {\n        detail: {\n            aiconfig: refreshedAiconfig\n        }\n    }));\n};\n\nconst updateDateFromDuration = () => {\n    const expirydate = baseElement.querySelector('[data-aiconfig-item=\"expiresat\"]');\n    const expirydurationDays = baseElement.querySelector('[data-aiconfig-item=\"expiryduration_days\"]');\n    const expirydurationHours = baseElement.querySelector('[data-aiconfig-item=\"expiryduration_hours\"]');\n    const expirydurationMinutes = baseElement.querySelector('[data-aiconfig-item=\"expiryduration_minutes\"]');\n\n    const currentTime = new Date();\n    currentTime.setTime(currentTime.getTime() - currentTime.getTimezoneOffset() * 60 * 1000\n        + (expirydurationDays.value * 24 * 60 * 60 * 1000)\n        + (expirydurationHours.value * 60 * 60 * 1000)\n        + (expirydurationMinutes.value * 60 * 1000));\n    expirydate.value = currentTime.toISOString().slice(0, 16);\n};\n\nconst updateDurationFromDate = () => {\n    const expirydate = baseElement.querySelector('[data-aiconfig-item=\"expiresat\"]');\n    const expirydurationDays = baseElement.querySelector('[data-aiconfig-item=\"expiryduration_days\"]');\n    const expirydurationHours = baseElement.querySelector('[data-aiconfig-item=\"expiryduration_hours\"]');\n    const expirydurationMinutes = baseElement.querySelector('[data-aiconfig-item=\"expiryduration_minutes\"]');\n\n    const unixtime = parseInt(+new Date(expirydate.value)) / 1000;\n    const {days, hours, minutes} = convertTargetUnixTimeToCountdown(unixtime);\n    expirydurationDays.value = days;\n    expirydurationHours.value = hours;\n    expirydurationMinutes.value = minutes;\n};\n\nconst syncViews = () => {\n    // Will be called AFTER the switch has been done. So we will see the new state.\n    const currentExpiryView =\n        baseElement.querySelector('[data-aiconfig-item=\"switchexpiryviewduration\"]').dataset.aiconfigShow === '0'\n            ? 'duration' : 'date';\n    // Now keep date view and duration view in sync if user just changed view.\n    if (currentExpiryView === 'duration') {\n        // We just switched to duration, so update the duration from the date values.\n        updateDurationFromDate();\n    } else {\n        updateDateFromDuration();\n    }\n};\n"],"names":["baseElement","async","element","aiconfig","templateContext","text","checked","enabled","expiresat","Date","parseInt","expiresatLocaltime","toISOString","slice","days","hours","minutes","durationDays","durationHours","durationMinutes","purposes","forEach","purpose","purposeConfig","allowed","identifier","name","displayname","push","html","js","Templates","renderForPromise","replaceNodeContents","querySelectorAll","button","addEventListener","dataset","aiconfigShow","classList","toggle","syncViews","querySelector","updateDateFromDuration","refreshedData","buildUpdateAiconfigObject","dispatchChangedEvent","purposeConfigElements","enabledToggle","id","parentElement","contextid","value","purposeConfigElement","toggleIdentifier","replace","refreshedAiconfig","dispatchEvent","CustomEvent","detail","expirydate","expirydurationDays","expirydurationHours","expirydurationMinutes","currentTime","setTime","getTime","getTimezoneOffset","unixtime","updateDurationFromDate"],"mappings":"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"}