{"version":3,"file":"ai_control_config.min.js","sources":["../src/ai_control_config.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handler for the config area of block_ai_control.\n *\n * @module     block_ai_control/ai_control_config\n * @copyright  2024 ISB Bayern\n * @author     Philipp Memmel\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {updateAiconfig} from 'block_ai_control/repository';\nimport Templates from 'core/templates';\nimport {getString} from 'core/str';\n\nlet baseElement = null;\n\n/**\n * Init the handler for the control area of block_ai_control.\n *\n * @param {HTMLElement} element the HTML element of the control area\n * @param {object} aiconfig the aiconfig which has been fetched from the external function\n */\nexport const init = async(element, aiconfig) => {\n    baseElement = element;\n    const templateContext = {};\n    templateContext.identifier = 'aiconfig_enabled';\n    templateContext.text = await getString('toggleai', 'block_ai_control');\n    templateContext.checked = aiconfig.enabled;\n\n    templateContext.expiresat = new Date(parseInt(aiconfig.expiresatLocaltime) * 1000).toISOString().slice(0, 16);\n\n    templateContext.purposes = [];\n    aiconfig.purposes.forEach(purpose => {\n        const purposeConfig = {\n            checked: purpose.allowed,\n            identifier: 'purpose_' + purpose.name,\n            text: purpose.displayname\n        };\n        templateContext.purposes.push(purposeConfig);\n    });\n\n\n    const {html, js} = await Templates.renderForPromise('block_ai_control/ai_control_config', {...templateContext});\n    Templates.replaceNodeContents(baseElement, html, js);\n\n    baseElement.querySelector('[data-ai-config=\"submitbutton\"]').addEventListener('click', async() => {\n        const refreshedData = await updateAiconfig(buildUpdateAiconfigObject());\n        dispatchChangedEvent(refreshedData);\n    });\n    baseElement.querySelector('[data-toggle-identifier=\"aiconfig_enabled\"] input').addEventListener('change', () => {\n        baseElement.querySelector('[data-ai-control=\"purposeslist\"]').classList.toggle('d-none');\n        baseElement.querySelector('[data-ai-control=\"expirydate\"]').classList.toggle('d-none');\n    });\n};\n\n/**\n * Collects information from the DOM and builds the new aiconfig object.\n *\n * This object then can be sent to the update external function.\n *\n * @returns {object} the aiconfig object which then can be used to send it to the update webservice.\n */\nconst buildUpdateAiconfigObject = () => {\n    const purposeConfigElements = baseElement.querySelectorAll('[data-toggle-identifier^=\"purpose_\"]');\n    const enabledToggle = baseElement.querySelector('[data-toggle-identifier=\"aiconfig_enabled\"]');\n    const expiresat = baseElement.querySelector('[data-aiconfig-item=\"expiresat\"]');\n\n    const aiconfig = {};\n    aiconfig.id = baseElement.parentElement.dataset.contextid;\n    aiconfig.enabled = !!parseInt(enabledToggle.dataset.checked);\n    aiconfig.expiresat = parseInt(+new Date(expiresat.value)) / 1000;\n    aiconfig.purposes = [];\n    purposeConfigElements.forEach(purposeConfigElement => {\n        const purpose = {};\n        purpose.id = purposeConfigElement.dataset.toggleIdentifier.replace(/^purpose_/, '');\n        purpose.allowed = !!parseInt(purposeConfigElement.dataset.checked);\n        aiconfig.purposes.push(purpose);\n    });\n    return aiconfig;\n};\n\n/**\n * Helper function to dispatch a changed event.\n *\n * The info area will react to this changed event so it knows when it has to rerender itself.\n *\n * @param {object} refreshedAiconfig the refreshed aiconfig object which has been received by the update external function.\n */\nconst dispatchChangedEvent = (refreshedAiconfig) => {\n    baseElement.dispatchEvent(new CustomEvent('aiconfigUpdated', {\n        detail: {\n            aiconfig: refreshedAiconfig\n        }\n    }));\n};\n"],"names":["baseElement","async","element","aiconfig","templateContext","text","checked","enabled","expiresat","Date","parseInt","expiresatLocaltime","toISOString","slice","purposes","forEach","purpose","purposeConfig","allowed","identifier","name","displayname","push","html","js","Templates","renderForPromise","replaceNodeContents","querySelector","addEventListener","refreshedData","buildUpdateAiconfigObject","dispatchChangedEvent","classList","toggle","purposeConfigElements","querySelectorAll","enabledToggle","id","parentElement","dataset","contextid","value","purposeConfigElement","toggleIdentifier","replace","refreshedAiconfig","dispatchEvent","CustomEvent","detail"],"mappings":";;;;;;;;oJA4BIA,YAAc,mBAQEC,MAAMC,QAASC,YAC/BH,YAAcE,cACRE,gBAAkB,CACxBA,WAA6B,oBAC7BA,gBAAgBC,WAAa,kBAAU,WAAY,oBACnDD,gBAAgBE,QAAUH,SAASI,QAEnCH,gBAAgBI,UAAY,IAAIC,KAA6C,IAAxCC,SAASP,SAASQ,qBAA4BC,cAAcC,MAAM,EAAG,IAE1GT,gBAAgBU,SAAW,GAC3BX,SAASW,SAASC,SAAQC,gBAChBC,cAAgB,CAClBX,QAASU,QAAQE,QACjBC,WAAY,WAAaH,QAAQI,KACjCf,KAAMW,QAAQK,aAElBjB,gBAAgBU,SAASQ,KAAKL,wBAI5BM,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiB,qCAAsC,IAAItB,qCACpFuB,oBAAoB3B,YAAauB,KAAMC,IAEjDxB,YAAY4B,cAAc,mCAAmCC,iBAAiB,SAAS5B,gBAC7E6B,oBAAsB,8BAAeC,6BAC3CC,qBAAqBF,kBAEzB9B,YAAY4B,cAAc,qDAAqDC,iBAAiB,UAAU,KACtG7B,YAAY4B,cAAc,oCAAoCK,UAAUC,OAAO,UAC/ElC,YAAY4B,cAAc,kCAAkCK,UAAUC,OAAO,oBAW/EH,0BAA4B,WACxBI,sBAAwBnC,YAAYoC,iBAAiB,wCACrDC,cAAgBrC,YAAY4B,cAAc,+CAC1CpB,UAAYR,YAAY4B,cAAc,oCAEtCzB,SAAW,UACjBA,SAASmC,GAAKtC,YAAYuC,cAAcC,QAAQC,UAChDtC,SAASI,UAAYG,SAAS2B,cAAcG,QAAQlC,SACpDH,SAASK,UAAYE,UAAU,IAAID,KAAKD,UAAUkC,QAAU,IAC5DvC,SAASW,SAAW,GACpBqB,sBAAsBpB,SAAQ4B,6BACpB3B,QAAU,GAChBA,QAAQsB,GAAKK,qBAAqBH,QAAQI,iBAAiBC,QAAQ,YAAa,IAChF7B,QAAQE,UAAYR,SAASiC,qBAAqBH,QAAQlC,SAC1DH,SAASW,SAASQ,KAAKN,YAEpBb,UAUL6B,qBAAwBc,oBAC1B9C,YAAY+C,cAAc,IAAIC,YAAY,kBAAmB,CACzDC,OAAQ,CACJ9C,SAAU2C"}