{"version":3,"file":"ai_control_config.min.js","sources":["../src/ai_control_config.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handler for the config area of block_ai_control.\n *\n * @module     block_ai_control/ai_control_config\n * @copyright  2024 ISB Bayern\n * @author     Philipp Memmel\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {updateAiconfig} from 'block_ai_control/repository';\nimport {convertTargetUnixTimeToCountdown} from 'block_ai_control/ai_control';\nimport Templates from 'core/templates';\nimport {getString} from 'core/str';\nimport {alert as moodleAlert} from 'core/notification';\nimport ModalSaveCancel from 'core/modal_save_cancel';\nimport ModalEvents from 'core/modal_events';\n\nlet baseElement = null;\nlet aiconfig = null;\n\n/**\n * @type {number} The target time as unix timestamp (seconds since 1/1/1970).\n *\n * Will constantly be updated by the UX and finally be used to submit the updated data to the\n * update endpoint.\n */\nlet currentTargetTime = 0;\n\n\n/**\n * Init the handler for the control area of block_ai_control.\n *\n * @param {HTMLElement} element the HTML element of the control area\n * @param {object} aiconfigObject the aiconfig which has been fetched from the external function\n */\nexport const init = async(element, aiconfigObject) => {\n    aiconfig = aiconfigObject;\n    baseElement = element;\n    const contextid = baseElement.parentElement.dataset.contextid;\n\n    const templateContext = {};\n    templateContext.identifier = 'aiconfig_enabled';\n    templateContext.text = await getString('toggleai', 'block_ai_control');\n    templateContext.checked = aiconfig.enabled;\n    templateContext.coursecontextid = contextid;\n    templateContext.showviewprompts = aiconfig.showviewprompts;\n\n    currentTargetTime = aiconfig.expiresat;\n\n    templateContext.expiresat = convertUnixtimeToDateElementFormat(currentTargetTime);\n\n    templateContext.purposes = [];\n    aiconfig.purposes.forEach(purpose => {\n        const purposeConfig = {\n            checked: purpose.allowed,\n            identifier: 'purpose_' + purpose.name,\n            text: purpose.displayname,\n            purposename: purpose.name\n        };\n        templateContext.purposes.push(purposeConfig);\n    });\n\n    const {html, js} = await Templates.renderForPromise('block_ai_control/ai_control_config', {...templateContext});\n    Templates.replaceNodeContents(baseElement, html, js);\n\n    baseElement.querySelectorAll('[data-aicontrol-item^=\"switchexpiryview\"]').forEach(button => {\n        button.addEventListener('click', () => {\n            updateTargetTime();\n            const elementsToToggleVisibility = baseElement.querySelectorAll('[data-aicontrol-show]');\n            elementsToToggleVisibility.forEach(element => {\n                element.dataset.aiconfigShow = element.dataset.aiconfigShow === '1' ? '0' : '1';\n                element.classList.toggle('d-none');\n            });\n        });\n    });\n\n    baseElement.querySelector('[data-aicontrol=\"submitbutton\"]').addEventListener('click', async() => {\n        await handleSubmitButtonClick();\n    });\n    baseElement.querySelector('[data-toggle-identifier=\"aiconfig_enabled\"] input').addEventListener('change', () => {\n        baseElement.querySelector('[data-aicontrol=\"purposeslist\"]').classList.toggle('d-none');\n        baseElement.querySelector('[data-aicontrol=\"expirydate\"]').classList.toggle('d-none');\n    });\n};\n\nconst handleSubmitButtonClick = async() => {\n    updateTargetTime();\n    const currentTime = new Date();\n    if (Math.floor(currentTime.getTime() / 1000) > currentTargetTime) {\n        await moodleAlert(getString('error', 'core'), getString('error_targettimeinpast', 'block_ai_control'));\n        return;\n    }\n\n    // We check if we have to show the modal here: We only show the modal if the current enabled state is false and at the same time\n    // are switching from false to true.\n    const isCurrentlyDisabled = aiconfig.enabled === false\n        && baseElement.parentElement.querySelector('[data-toggle-identifier=\"aiconfig_enabled\"]').dataset.checked === '1';\n\n    if (aiconfig.infoText.length > 0 && isCurrentlyDisabled) {\n        const infoModal = await ModalSaveCancel.create({\n            title: getString('infotextmodalheading', 'block_ai_control'),\n            body: aiconfig.infoText,\n            show: true,\n            buttons: {\n                'save': getString('confirm', 'moodle'),\n                'cancel': getString('cancel', 'moodle'),\n            },\n        });\n        infoModal.getRoot().on(ModalEvents.save, async() => {\n            const refreshedData = await updateAiconfig(buildUpdateAiconfigObject());\n            aiconfig = refreshedData;\n            dispatchChangedEvent(refreshedData);\n        });\n    } else {\n        const refreshedData = await updateAiconfig(buildUpdateAiconfigObject());\n        aiconfig = refreshedData;\n        dispatchChangedEvent(refreshedData);\n    }\n};\n\n/**\n * Collects information from the DOM and builds the new aiconfig object.\n *\n * This object then can be sent to the update external function.\n *\n * @returns {object} the aiconfig object which then can be used to send it to the update webservice.\n */\nconst buildUpdateAiconfigObject = () => {\n    const purposeConfigElements = baseElement.querySelectorAll('[data-toggle-identifier^=\"purpose_\"]');\n    const enabledToggle = baseElement.querySelector('[data-toggle-identifier=\"aiconfig_enabled\"]');\n\n    const aiconfig = {};\n    aiconfig.id = baseElement.parentElement.dataset.contextid;\n    aiconfig.enabled = !!parseInt(enabledToggle.dataset.checked);\n    aiconfig.expiresat = currentTargetTime;\n    aiconfig.purposes = [];\n    purposeConfigElements.forEach(purposeConfigElement => {\n        const purpose = {};\n        purpose.id = purposeConfigElement.dataset.toggleIdentifier.replace(/^purpose_/, '');\n        purpose.allowed = !!parseInt(purposeConfigElement.dataset.checked);\n        aiconfig.purposes.push(purpose);\n    });\n    return aiconfig;\n};\n\n/**\n * Helper function to dispatch a changed event.\n *\n * The info area will react to this changed event so it knows when it has to rerender itself.\n *\n * @param {object} refreshedAiconfig the refreshed aiconfig object which has been received by the update external function.\n */\nconst dispatchChangedEvent = (refreshedAiconfig) => {\n    baseElement.dispatchEvent(new CustomEvent('aiconfigUpdated', {\n        detail: {\n            aiconfig: refreshedAiconfig\n        }\n    }));\n};\n\nconst updateTargetTime = () => {\n    const durationElement = baseElement.querySelector('[data-aicontrol-item=\"expiryduration\"]');\n    const expirydurationDays = baseElement.querySelector('[data-aicontrol-item=\"expiryduration_days\"]');\n    const expirydurationHours = baseElement.querySelector('[data-aicontrol-item=\"expiryduration_hours\"]');\n    const expirydurationMinutes = baseElement.querySelector('[data-aicontrol-item=\"expiryduration_minutes\"]');\n\n    const dateElement = baseElement.querySelector('[data-aicontrol-item=\"expirydate\"]');\n\n    if (durationElement.dataset.aiconfigShow === '1') {\n        const currentTime = new Date();\n        currentTargetTime = currentTime.getTime()\n            + (expirydurationDays.value * 24 * 60 * 60 * 1000)\n            + (expirydurationHours.value * 60 * 60 * 1000)\n            + (expirydurationMinutes.value * 60 * 1000);\n        currentTargetTime = Math.round(currentTargetTime / 1000);\n    } else {\n        currentTargetTime = Math.round(parseInt(+new Date(dateElement.value)) / 1000);\n    }\n\n    // Now our global time is set correctly, we can update both UI elements.\n    dateElement.value = convertUnixtimeToDateElementFormat(currentTargetTime);\n\n    const {days, hours, minutes} = convertTargetUnixTimeToCountdown(currentTargetTime);\n    expirydurationDays.value = days;\n    expirydurationHours.value = hours;\n    expirydurationMinutes.value = minutes;\n};\n\n/**\n * Converts a unix time stamp (seconds since 1/1/1970) into the format a <input type=\"datetime-local\"> element expects.\n *\n * It will convert it into the local time of the user's browser.\n *\n * @param {number} unixtime the unix time stamp in seconds sind 1/1/1970\n * @returns {string} the string to be set as value of the input datetime-local element\n */\nconst convertUnixtimeToDateElementFormat = (unixtime) => {\n    const localTargetTime = new Date(unixtime * 1000);\n    localTargetTime.setTime(localTargetTime.getTime() - localTargetTime.getTimezoneOffset() * 60 * 1000);\n    return localTargetTime.toISOString().slice(0, 16);\n};\n"],"names":["baseElement","aiconfig","currentTargetTime","async","element","aiconfigObject","contextid","parentElement","dataset","templateContext","text","checked","enabled","coursecontextid","showviewprompts","expiresat","convertUnixtimeToDateElementFormat","purposes","forEach","purpose","purposeConfig","allowed","identifier","name","displayname","purposename","push","html","js","Templates","renderForPromise","replaceNodeContents","querySelectorAll","button","addEventListener","updateTargetTime","aiconfigShow","classList","toggle","querySelector","handleSubmitButtonClick","currentTime","Date","Math","floor","getTime","isCurrentlyDisabled","infoText","length","ModalSaveCancel","create","title","body","show","buttons","getRoot","on","ModalEvents","save","refreshedData","buildUpdateAiconfigObject","dispatchChangedEvent","purposeConfigElements","enabledToggle","id","parseInt","purposeConfigElement","toggleIdentifier","replace","refreshedAiconfig","dispatchEvent","CustomEvent","detail","durationElement","expirydurationDays","expirydurationHours","expirydurationMinutes","dateElement","value","round","days","hours","minutes","unixtime","localTargetTime","setTime","getTimezoneOffset","toISOString","slice"],"mappings":"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"}