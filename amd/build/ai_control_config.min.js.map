{"version":3,"file":"ai_control_config.min.js","sources":["../src/ai_control_config.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handler for the config area of block_ai_control.\n *\n * @module     block_ai_control/ai_control_config\n * @copyright  2024 ISB Bayern\n * @author     Philipp Memmel\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {updateAiconfig} from 'block_ai_control/repository';\nimport {convertTargetUnixTimeToCountdown} from 'block_ai_control/ai_control';\nimport Templates from 'core/templates';\nimport {getString} from 'core/str';\n\nlet baseElement = null;\n\n/**\n * @type {number} The target time as unix timestamp (seconds since 1/1/1970).\n *\n * Will constantly be updated by the UX and finally be used to submit the updated data to the\n * update endpoint.\n */\nlet currentTargetTime = 0;\n\n/**\n * Init the handler for the control area of block_ai_control.\n *\n * @param {HTMLElement} element the HTML element of the control area\n * @param {object} aiconfig the aiconfig which has been fetched from the external function\n */\nexport const init = async(element, aiconfig) => {\n    baseElement = element;\n    const templateContext = {};\n    templateContext.identifier = 'aiconfig_enabled';\n    templateContext.text = await getString('toggleai', 'block_ai_control');\n    templateContext.checked = aiconfig.enabled;\n\n    currentTargetTime = aiconfig.expiresat;\n\n    templateContext.expiresat = convertUnixtimeToDateElementFormat(currentTargetTime);\n\n    templateContext.purposes = [];\n    aiconfig.purposes.forEach(purpose => {\n        const purposeConfig = {\n            checked: purpose.allowed,\n            identifier: 'purpose_' + purpose.name,\n            text: purpose.displayname\n        };\n        templateContext.purposes.push(purposeConfig);\n    });\n\n    const {html, js} = await Templates.renderForPromise('block_ai_control/ai_control_config', {...templateContext});\n    Templates.replaceNodeContents(baseElement, html, js);\n\n    baseElement.querySelectorAll('[data-aicontrol-item^=\"switchexpiryview\"]').forEach(button => {\n        button.addEventListener('click', () => {\n            updateTargetTime();\n            const elementsToToggleVisibility = baseElement.querySelectorAll('[data-aicontrol-show]');\n            elementsToToggleVisibility.forEach(element => {\n                element.dataset.aiconfigShow = element.dataset.aiconfigShow === '1' ? '0' : '1';\n                element.classList.toggle('d-none');\n            });\n        });\n    });\n\n    baseElement.querySelector('[data-aicontrol=\"submitbutton\"]').addEventListener('click', async() => {\n        updateTargetTime();\n        const refreshedData = await updateAiconfig(buildUpdateAiconfigObject());\n        dispatchChangedEvent(refreshedData);\n    });\n    baseElement.querySelector('[data-toggle-identifier=\"aiconfig_enabled\"] input').addEventListener('change', () => {\n        baseElement.querySelector('[data-aicontrol=\"purposeslist\"]').classList.toggle('d-none');\n        baseElement.querySelector('[data-aicontrol=\"expirydate\"]').classList.toggle('d-none');\n    });\n};\n\n/**\n * Collects information from the DOM and builds the new aiconfig object.\n *\n * This object then can be sent to the update external function.\n *\n * @returns {object} the aiconfig object which then can be used to send it to the update webservice.\n */\nconst buildUpdateAiconfigObject = () => {\n    const purposeConfigElements = baseElement.querySelectorAll('[data-toggle-identifier^=\"purpose_\"]');\n    const enabledToggle = baseElement.querySelector('[data-toggle-identifier=\"aiconfig_enabled\"]');\n\n    const aiconfig = {};\n    aiconfig.id = baseElement.parentElement.dataset.contextid;\n    aiconfig.enabled = !!parseInt(enabledToggle.dataset.checked);\n    aiconfig.expiresat = currentTargetTime;\n    aiconfig.purposes = [];\n    purposeConfigElements.forEach(purposeConfigElement => {\n        const purpose = {};\n        purpose.id = purposeConfigElement.dataset.toggleIdentifier.replace(/^purpose_/, '');\n        purpose.allowed = !!parseInt(purposeConfigElement.dataset.checked);\n        aiconfig.purposes.push(purpose);\n    });\n    return aiconfig;\n};\n\n/**\n * Helper function to dispatch a changed event.\n *\n * The info area will react to this changed event so it knows when it has to rerender itself.\n *\n * @param {object} refreshedAiconfig the refreshed aiconfig object which has been received by the update external function.\n */\nconst dispatchChangedEvent = (refreshedAiconfig) => {\n    baseElement.dispatchEvent(new CustomEvent('aiconfigUpdated', {\n        detail: {\n            aiconfig: refreshedAiconfig\n        }\n    }));\n};\n\nconst updateTargetTime = () => {\n    const durationElement = baseElement.querySelector('[data-aicontrol-item=\"expiryduration\"]');\n    const expirydurationDays = baseElement.querySelector('[data-aicontrol-item=\"expiryduration_days\"]');\n    const expirydurationHours = baseElement.querySelector('[data-aicontrol-item=\"expiryduration_hours\"]');\n    const expirydurationMinutes = baseElement.querySelector('[data-aicontrol-item=\"expiryduration_minutes\"]');\n\n    const dateElement = baseElement.querySelector('[data-aicontrol-item=\"expirydate\"]');\n\n    if (durationElement.dataset.aiconfigShow === '1') {\n        const currentTime = new Date();\n        currentTargetTime = currentTime.getTime()\n            + (expirydurationDays.value * 24 * 60 * 60 * 1000)\n            + (expirydurationHours.value * 60 * 60 * 1000)\n            + (expirydurationMinutes.value * 60 * 1000);\n        currentTargetTime = Math.round(currentTargetTime / 1000);\n    } else {\n        currentTargetTime = Math.round(parseInt(+new Date(dateElement.value)) / 1000);\n    }\n\n    // Now our global time is set correctly, we can update both UI elements.\n    dateElement.value = convertUnixtimeToDateElementFormat(currentTargetTime);\n\n    const {days, hours, minutes} = convertTargetUnixTimeToCountdown(currentTargetTime);\n    expirydurationDays.value = days;\n    expirydurationHours.value = hours;\n    expirydurationMinutes.value = minutes;\n};\n\n/**\n * Converts a unix time stamp (seconds since 1/1/1970) into the format a <input type=\"datetime-local\"> element expects.\n *\n * It will convert it into the local time of the user's browser.\n *\n * @param {number} unixtime the unix time stamp in seconds sind 1/1/1970\n * @returns {string} the string to be set as value of the input datetime-local element\n */\nconst convertUnixtimeToDateElementFormat = (unixtime) => {\n    const localTargetTime = new Date(unixtime * 1000);\n    localTargetTime.setTime(localTargetTime.getTime() - localTargetTime.getTimezoneOffset() * 60 * 1000);\n    return localTargetTime.toISOString().slice(0, 16);\n};\n"],"names":["baseElement","currentTargetTime","async","element","aiconfig","templateContext","text","checked","enabled","expiresat","convertUnixtimeToDateElementFormat","purposes","forEach","purpose","purposeConfig","allowed","identifier","name","displayname","push","html","js","Templates","renderForPromise","replaceNodeContents","querySelectorAll","button","addEventListener","updateTargetTime","dataset","aiconfigShow","classList","toggle","querySelector","refreshedData","buildUpdateAiconfigObject","dispatchChangedEvent","purposeConfigElements","enabledToggle","id","parentElement","contextid","parseInt","purposeConfigElement","toggleIdentifier","replace","refreshedAiconfig","dispatchEvent","CustomEvent","detail","durationElement","expirydurationDays","expirydurationHours","expirydurationMinutes","dateElement","currentTime","Date","getTime","value","Math","round","days","hours","minutes","unixtime","localTargetTime","setTime","getTimezoneOffset","toISOString","slice"],"mappings":";;;;;;;;oJA6BIA,YAAc,KAQdC,kBAAoB,gBAQJC,MAAMC,QAASC,YAC/BJ,YAAcG,cACRE,gBAAkB,CACxBA,WAA6B,oBAC7BA,gBAAgBC,WAAa,kBAAU,WAAY,oBACnDD,gBAAgBE,QAAUH,SAASI,QAEnCP,kBAAoBG,SAASK,UAE7BJ,gBAAgBI,UAAYC,mCAAmCT,mBAE/DI,gBAAgBM,SAAW,GAC3BP,SAASO,SAASC,SAAQC,gBAChBC,cAAgB,CAClBP,QAASM,QAAQE,QACjBC,WAAY,WAAaH,QAAQI,KACjCX,KAAMO,QAAQK,aAElBb,gBAAgBM,SAASQ,KAAKL,wBAG5BM,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiB,qCAAsC,IAAIlB,qCACpFmB,oBAAoBxB,YAAaoB,KAAMC,IAEjDrB,YAAYyB,iBAAiB,6CAA6Cb,SAAQc,SAC9EA,OAAOC,iBAAiB,SAAS,KAC7BC,mBACmC5B,YAAYyB,iBAAiB,yBACrCb,SAAQT,UAC/BA,QAAQ0B,QAAQC,aAAgD,MAAjC3B,QAAQ0B,QAAQC,aAAuB,IAAM,IAC5E3B,QAAQ4B,UAAUC,OAAO,mBAKrChC,YAAYiC,cAAc,mCAAmCN,iBAAiB,SAASzB,UACnF0B,yBACMM,oBAAsB,8BAAeC,6BAC3CC,qBAAqBF,kBAEzBlC,YAAYiC,cAAc,qDAAqDN,iBAAiB,UAAU,KACtG3B,YAAYiC,cAAc,mCAAmCF,UAAUC,OAAO,UAC9EhC,YAAYiC,cAAc,iCAAiCF,UAAUC,OAAO,oBAW9EG,0BAA4B,WACxBE,sBAAwBrC,YAAYyB,iBAAiB,wCACrDa,cAAgBtC,YAAYiC,cAAc,+CAE1C7B,SAAW,UACjBA,SAASmC,GAAKvC,YAAYwC,cAAcX,QAAQY,UAChDrC,SAASI,UAAYkC,SAASJ,cAAcT,QAAQtB,SACpDH,SAASK,UAAYR,kBACrBG,SAASO,SAAW,GACpB0B,sBAAsBzB,SAAQ+B,6BACpB9B,QAAU,GAChBA,QAAQ0B,GAAKI,qBAAqBd,QAAQe,iBAAiBC,QAAQ,YAAa,IAChFhC,QAAQE,UAAY2B,SAASC,qBAAqBd,QAAQtB,SAC1DH,SAASO,SAASQ,KAAKN,YAEpBT,UAULgC,qBAAwBU,oBAC1B9C,YAAY+C,cAAc,IAAIC,YAAY,kBAAmB,CACzDC,OAAQ,CACJ7C,SAAU0C,uBAKhBlB,iBAAmB,WACfsB,gBAAkBlD,YAAYiC,cAAc,0CAC5CkB,mBAAqBnD,YAAYiC,cAAc,+CAC/CmB,oBAAsBpD,YAAYiC,cAAc,gDAChDoB,sBAAwBrD,YAAYiC,cAAc,kDAElDqB,YAActD,YAAYiC,cAAc,yCAED,MAAzCiB,gBAAgBrB,QAAQC,aAAsB,OACxCyB,YAAc,IAAIC,KACxBvD,kBAAoBsD,YAAYE,UACE,GAA3BN,mBAAmBO,MAAa,GAAK,GAAK,IACd,GAA5BN,oBAAoBM,MAAa,GAAK,IACR,GAA9BL,sBAAsBK,MAAa,IAC1CzD,kBAAoB0D,KAAKC,MAAM3D,kBAAoB,UAEnDA,kBAAoB0D,KAAKC,MAAMlB,UAAU,IAAIc,KAAKF,YAAYI,QAAU,KAI5EJ,YAAYI,MAAQhD,mCAAmCT,yBAEjD4D,KAACA,KAADC,MAAOA,MAAPC,QAAcA,UAAW,gDAAiC9D,mBAChEkD,mBAAmBO,MAAQG,KAC3BT,oBAAoBM,MAAQI,MAC5BT,sBAAsBK,MAAQK,SAW5BrD,mCAAsCsD,iBAClCC,gBAAkB,IAAIT,KAAgB,IAAXQ,iBACjCC,gBAAgBC,QAAQD,gBAAgBR,UAAkD,GAAtCQ,gBAAgBE,oBAA2B,KACxFF,gBAAgBG,cAAcC,MAAM,EAAG"}